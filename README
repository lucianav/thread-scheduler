Luciana Viziru
Thread Scheduler

The linkedlist was used as a container for the waiting tasks and the task_queue
for the tasks in a ready state.

The linkedlist will receive a reference to a task struct already allocated and
initialized and it will add it as the last node in the list.

task_queue is a priority queue implemented using a heap. The priority of the
tasks is given by the priority field of the task struct. In case of equal
priorities, the field queue_id, which is set at the entry in task_queue, is used
for ordering.
The initial capacity of the container is given by the define INIT_SIZE. If
max_capacity is reached, then the container capacity will double. If there are
less then a quarter of max_capacity elements in the container at any given time,
the queue will halve its size. These checks are preformed at add, respectively
pop operations. The internal function resize() is called when changing the size
of the queue and the heap property is maintained using the heapify_up() and
heapify_down() functions. When added/popped, the state of a task is changed to
READY/RUNNING.

Synchronization is assured using mutexes. The threads are blocked by
performing a lock operation on the mutex inside the task struct. The first ever
thread of the scheduler is not locked. When a task is created, the thread
executing the fork call will lock the new task's mutex. When the new thread
reaches the RUNNING state, unlock is performed. In order to access a thread's
mutex when unlocking it, Thread Specific Data was used. The key is held as a
field of the scheduler struct and the individual value is the address of the
task mutex.
Before returning from all "actions", the schedule() function is called in order
to take into account the performed operation and trigger rescheduling,
if necessary.

The schedule function counts the number of instructions executed. The memory is
freed when a thread reaches the TERMINATED state. A condition variable is used
for waiting for all the tasks in the scheduler to complete. Therefore, it is set
when running_task reaches the TERMINATED state and the ready_queue is empty.
It is guaranteed that at all times, there is a READY task which can be scheduled.
Therefore, the waiting tasks needn't be checked for the end of the simulation.
